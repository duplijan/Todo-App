{"version":3,"sources":["Components/NewTodo.js","Components/ButtonsGroup.js","Components/TodoItem.js","Components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodo","props","react_default","a","createElement","className","onSubmit","handleSubmit","htmlFor","id","onChange","handleChange","value","newTodo","type","placeholder","ButtonsGroup","onClick","selectAllTodos","unselectAllTodos","deleteAllTodos","TodoItem","todo","index","key","e","toggleTodoDone","checked","done","title","removeTodo","TodoList","todos","length","map","Components_TodoItem","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","setState","target","preventDefault","toConsumableArray","concat","objectSpread","splice","Components_NewTodo","Components_TodoList","Components_ButtonsGroup","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f61fd5f4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NewTodo = (props) => {\r\n  return (\r\n    <div className='newTodo'>\r\n      <form onSubmit={props.handleSubmit}>\r\n        <label htmlFor='new-todo'>\r\n          What is needed to be done?\r\n        </label><br />\r\n        <input id='new-todo' onChange={props.handleChange} value={props.newTodo} type='text' placeholder='new todo...' />\r\n        <button type='submit' className='addTodo_button'>\r\n          Add Todo!\r\n        </button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\nexport default NewTodo;\r\n","import React from 'react';\r\n\r\nconst ButtonsGroup = (props) => {\r\n  return (\r\n    <div className='buttons_group'>\r\n      <button onClick={props.selectAllTodos}>Select All</button>\r\n      <button onClick={props.unselectAllTodos}>UnSelect All</button>\r\n      <button onClick={props.deleteAllTodos}>Delete All</button>\r\n    </div>\r\n  )\r\n}\r\nexport default ButtonsGroup;\r\n","import React from 'react';\r\n\r\nconst TodoItem = (props) => {\r\n  const {todo, index} = props;\r\n  return (\r\n    <div className='todoItem' key={todo}>\r\n      <input type='checkbox' onChange={(e) => props.toggleTodoDone(e, index)} checked={todo.done} /> {/*passed index of every single todo to find out which one was chacked*/}\r\n      {/* add done class when the box is checked, todo.done is changed in the state */}\r\n      <span className={todo.done ? 'done' : ''}> {todo.title} </span>\r\n      <button className='delete_button'onClick={() => props.removeTodo(index) }>Remove</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst TodoList = (props) => {\r\n  const todos = props.todos;\r\n  const todo = todos.length ? (\r\n    todos.map((todo, index) => {\r\n      return (\r\n        <TodoItem key={index}\r\n                 todo={todo}\r\n                 index={index}\r\n                 toggleTodoDone={props.toggleTodoDone}\r\n                 removeTodo={props.removeTodo}\r\n        />\r\n      )\r\n    })\r\n  ) :\r\n  (\r\n    <div className='message'>\r\n      <h3> Not Posts Yet!</h3>\r\n    </div>\r\n  )\r\n  return (\r\n    <div className='todoList'>\r\n      {todo}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from 'react';\nimport NewTodo from './Components/NewTodo';\nimport ButtonsGroup from './Components/ButtonsGroup';\nimport TodoList from './Components/TodoList';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      newTodo:'',\n      todos: [\n        {\n          title: 'Learn React',\n          done: false\n        },\n        {\n          title: 'Create Todo App',\n          done: false\n        }\n      ]\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.toggleTodoDone = this.toggleTodoDone.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n    this.selectAllTodos = this.selectAllTodos.bind(this);\n    this.unselectAllTodos = this.unselectAllTodos.bind(this);\n    this.deleteAllTodos = this.deleteAllTodos.bind(this);\n  }\n\n  handleChange(e){\n    this.setState({\n      newTodo: e.target.value\n    })\n  }\n\n  handleSubmit(e){\n    e.preventDefault();\n    if(!this.state.newTodo){\n      return;\n    }\n\n    this.setState({\n      newTodo: '',\n      todos: [...this.state.todos, {\n        title: this.state.newTodo,\n        done: false\n      }]\n    })\n\n  }\n\n  toggleTodoDone(e, index){\n    const todos = [...this.state.todos]; //create copy of the todos array\n    todos[index] = {\n          ...todos[index], // spreads all properties,  title: todo.title\n          done: e.target.checked\n    }; //create copy of the todo object and update done property, checked true, unchecked false\n    this.setState({\n      todos\n    })\n  }\n\n  removeTodo(index){\n    const todos = [...this.state.todos]; // copy array\n    todos.splice(index, 1); // remove todo with specific index\n    this.setState({\n      todos\n    })\n  }\n\n  deleteAllTodos(){\n    this.setState({\n      todos: []\n    })\n  }\n\n  selectAllTodos(){\n    // map over the todos array and set done to true for all of them => apply style line-through\n    // only select the todos but not check boxes\n    // to select checkboxes use checked={todo.done} on the checkbox\n    const todos = this.state.todos.map( todo => {\n      return {\n        title: todo.title, // ...todo\n        done: true\n      }\n    });\n    this.setState({\n      todos\n    })\n  }\n\n  unselectAllTodos(){\n    const todos = this.state.todos.map( todo => {\n      return {\n        title: todo.title,\n        done: false\n      }\n    });\n    this.setState({\n      todos\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"TodoApp\">\n        <h1 className='todo_heading'>TODO'S</h1>\n        <NewTodo handleChange={this.handleChange} handleSubmit={this.handleSubmit} newTodo={this.state.newTodo} />\n        <TodoList todos={this.state.todos}\n                    toggleTodoDone={this.toggleTodoDone}\n                    removeTodo={this.removeTodo}\n        />\n        <ButtonsGroup selectAllTodos={this.selectAllTodos}\n                      unselectAllTodos={this.unselectAllTodos}\n                      deleteAllTodos={this.deleteAllTodos}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}